kaleidoscope
  = Statement*

Comment "comment"
  = "#" _ text: exceptnew* newline
  { return "# " + text.join(''); }

// FIXME: dunno yet
// Expressions
Expr
  = lhs: Unary _ rhs: BinaryRHS?
  {
    if (rhs) { return [lhs, rhs] }
    else { return lhs }
  }
  
BinaryRHS
  = op: Operator _ rhs: Unary
  { return { op: op, rhs: rhs} }

Unary
  = Primary

// FIXME: add var,for,parens
Primary
  = If
  / Call
  / NumberExpr
  / Identifier

Call "function call"
  = id: Identifier+ "(" expr: Expr ")" _
  {
  	return { call: id.join(''), expr: expr };
  }

// Binary operators
ComparisonOp
  = ">" / "<" / "="
ArtimeticOp
  = "+"/"-"/"*"/"/"
Operator "operator"
	= ArtimeticOp
    / ComparisonOp

// Literals
NumberExpr
  = [0-9]+
  {
  	return parseInt(text(), 10);
  }

// Conditional (are expressions)
If
  = _ "if" _ condition: Expr _ "then" _ thenb: Expr _ "else" _ elseb: Expr
  {
  	return { if: condition, then: thenb, else: elseb };
  }

// Statements
// FIXME: also capture body
Def "function definition"
  = "def" _ id: Identifier+ "(" args: Identifier+ ")" newline
  {
  	return { def: id.join(''), args: args.join('') };
  }
Extern
  = "extern" exceptnew+ newline
Statement
 = Def
 / Extern
 / Comment
 / Expr

Identifier "identifier"
 = [a-zA-Z][a-zA-Z0-9]* { return text(); }

Integer "integer"
  = [0-9]+ { return parseInt(text(), 10); }

_ "whitespace"
  = [ \t\n\r]*

newline "end of line"
  = [\n\r\u2028\u2029]
  
anychar "any character"
   = exceptnew
exceptnew 
  = [^\n\r\u2028\u2029]


